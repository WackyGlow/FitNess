name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  docker_images_container_registry:
    name: Google Container registry, Build and Push Docker images
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      IMAGE_NAME: fitness-$GITHUB_RUN_NUMBER
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure Docker Client
      run: |
        echo ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }} > key.json
        gcloud auth activate-service-account --key-file=key.json
        gcloud auth configure-docker

    - name: Build and push Docker images

      run: |
        docker build -t gcr.io/$PROJECT_ID/${{ env.IMAGE_NAME }}-workout-service:${{ github.sha }} -f WorkoutService/Dockerfile .
        docker push gcr.io/$PROJECT_ID/${{ env.IMAGE_NAME }}-workout-service:${{ github.sha }}

        docker build -t gcr.io/$PROJECT_ID/${{ env.IMAGE_NAME }}-nutrition-service:${{ github.sha }} -f NutritionService/Dockerfile .
        docker push gcr.io/$PROJECT_ID/${{ env.IMAGE_NAME }}-nutrition-service:${{ github.sha }}

        docker build -t gcr.io/$PROJECT_ID/${{ env.IMAGE_NAME }}-user-service:${{ github.sha }} -f UserService/Dockerfile .
        docker push gcr.io/$PROJECT_ID/${{ env.IMAGE_NAME }}-user-service:${{ github.sha }}

  docker_images_artifact_registry:
    name: Google Artifact registry, Build and Push Docker images
    runs-on: ubuntu-latest
    env:
      RUN_NUMBER: fitness-$GITHUB_RUN_NUMBER
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ARTIFACT_SERVICE_ACCOUNT_KEY }}
      PROJECT_ID: dls-exam
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: google-github-actions/setup-gcloud@main
      with:
        service_account_key: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    #- name: Authenticate with Google Cloud
    #  uses: google-github-actions/auth@v1
    #  with:
    #    service_account: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
    #    project_id: ${{ env.PROJECT_ID }} 
    
    #- name: Automatic Tagging of Releases
    #  id: increment-git-tag 
    #  run: |
    #    bash ./scripts/git_update.sh -v major

    - name: Configure Docker Client
      run: |
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet

    - name: Build and push Docker images 
      run: |
        docker build -t europe-west3-docker.pkg.dev/$PROJECT_ID/images/${{ env.RUN_NUMBER }}-workout-service:${{ github.sha }} -f WorkoutService/Dockerfile .
        docker push europe-west3-docker.pkg.dev/$PROJECT_ID/images/${{ env.RUN_NUMBER }}-workout-service:${{ github.sha }}

        docker build -t europe-west3-docker.pkg.dev/$PROJECT_ID/images/${{ env.RUN_NUMBER }}-nutrition-service:${{ github.sha }} -f NutritionService/Dockerfile .
        docker push europe-west3-docker.pkg.dev/$PROJECT_ID/images/${{ env.RUN_NUMBER }}-nutrition-service:${{ github.sha }}

        docker build -t europe-west3-docker.pkg.dev/$PROJECT_ID/images/${{ env.RUN_NUMBER }}-user-service:${{ github.sha }} -f UserService/Dockerfile .
        docker push europe-west3-docker.pkg.dev/$PROJECT_ID/images/${{ env.RUN_NUMBER }}-user-service:${{ github.sha }}

  build-and-test:
    name: Run all unit tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Build
        run: dotnet build --configuration Release ./FitNess.UnitTests/FitNess.UnitTests.csproj

      - name: Run Unit Tests
        run: dotnet test --configuration Release --no-build ./FitNess.UnitTests/FitNess.UnitTests.csproj --logger "trx;LogFileName=testresults.trx"

      - name: Publish test results
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: TestResults